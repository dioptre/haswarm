version: "3.7"
services:
  traefik_init:
    image: traefik:v1.7
    command:
      - "storeconfig"
      - "--api"
      - "--entrypoints=Name:http Address::80 Redirect.EntryPoint:https"
      - "--entrypoints=Name:https Address::443 TLS"
      - "--defaultentrypoints=http,https"
      - "--acme"
      - "--acme.storage=traefik/acme/account"
      - "--acme.entryPoint=https"
      - "--acme.httpChallenge.entryPoint=http"
      - "--acme.onHostRule=true"
      - "--acme.onDemand=false"
      - "--acme.email=foobar@example.com"
      - "--docker"
      - "--docker.swarmMode"
      - "--docker.domain=example.com"
      - "--docker.watch"
      - "--consul"
      - "--consul.endpoint=haswarm_consul:8500"
      - "--consul.prefix=traefik"
    networks:
      - traefik
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 30s        
    depends_on:
      - consul  
  traefik:
    image: traefik:v2.2
    depends_on:
      - traefik_init
      - consul
    command:
      - "--api"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.consul"
      - "--providers.consul.endpoints=haswarm_consul:8500"
      - "--providers.docker"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - webgateway
      - traefik
    deploy:
      # mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
  traefik_lb:
    image: traefik:v2.2
    depends_on:
      - trafik_init
      - traefik
      - consul
    command:
      - "--providers.consul"
      - "--providers.consul.endpoints=haswarm_consul:8500"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - webgateway
      - traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    deploy:
      replicas: 3
      placement:
        constraints:
          - node.hostname == docker1-prod
          - node.hostname == docker2-prod
          - node.hostname == docker3-prod
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any     
  consul:
    image: consul
    command: agent -server -bootstrap-expect=1
    depends_on:
      - consul
    environment:
      - CONSUL_LOCAL_CONFIG={"datacenter":"hetzner","server":true}
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 100
        window: 30s
    networks:
      - traefik
  consul_backup:
    #hostname: consul-backup
    image: consul
    command: agent -server -bootstrap-expect=1 --retry-join=haswarm_consul
    environment:
      - CONSUL_LOCAL_CONFIG={"datacenter":"hetzner","server":true}
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    deploy:
      placement:
        constraints:
          - node.hostname == docker3.hetzner.sfpl.io
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 100
        window: 30s
    networks:
      - traefik      
  ## These are for testing
  # whoami:
  #   # A container that exposes an API to show its IP address 
  #   image: containous/whoami
  #   deploy:
  #     restart_policy:
  #       condition: none
  #     replicas: 1
  #     labels:
  #       - traefik.http.routers.haswarm-whoami.rule=Host(`whoami.docker.localhost`)
  #       - traefik.http.services.haswarm-whoami.loadbalancer.server.port=80
  #   networks:
  #     - traefik          
  #   environment:
  #     - HOSTNAME="{{.Node.Hostname}}"      
  # alpine:
  #   # A container that exposes an API to show its IP address
  #   image: alpine
  #   command: tail -F anything
  #   deploy:
  #     restart_policy:
  #       condition: none
  #     replicas: 1
  #   labels:
  #     - "traefik.http.routers.whoami.rule=Host(`whoiswho.docker.localhost`)"  
  #   networks:
  #     - traefik          
  #   environment:
  #     - HOSTNAME="{{.Node.Hostname}}"            

networks:
  webgateway:
    driver: overlay
    external: true
  traefik:
    driver: overlay